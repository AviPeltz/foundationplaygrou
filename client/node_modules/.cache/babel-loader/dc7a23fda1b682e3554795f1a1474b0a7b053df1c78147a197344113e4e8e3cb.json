{"ast":null,"code":"var _jsxFileName = \"/Users/avipeltz/Developer/100days/foundationPlayground/foundationplayground/src/GPTPlayground.js\",\n  _s = $RefreshSig$();\n// GPTPlayground.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GPTPlayground = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [selectedModel, setSelectedModel] = useState('gpt-3'); // Default model\n\n  const handleRunModel = () => {\n    // Add your logic here to run the selected GPT model with the inputText\n    // and display the output.\n    // You can use OpenAI API or any other method to interact with GPT models.\n\n    // For now, let's just log the input text and selected model to the console.\n    console.log(`Running ${selectedModel} model with input: ${inputText}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto mt-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto bg-white p-8 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"GPT Playground\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"flex\",\n        children: \"Input Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"w-full p-2 border border-gray-300 rounded mb-4\",\n        rows: \"4\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block mb-2\",\n        children: \"Select Model:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"w-full p-2 border border-gray-300 rounded mb-4\",\n        value: selectedModel,\n        onChange: e => setSelectedModel(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt-3\",\n          children: \"GPT-3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gpt-3-5\",\n          children: \"GPT-3.5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"llama\",\n          children: \"llama\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 text-white p-2 rounded hover:bg-blue-700\",\n        onClick: handleRunModel,\n        children: \"Run Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(GPTPlayground, \"c9kW7tYFxubbj7PemdGtq+Ut2AM=\");\n_c = GPTPlayground;\nexport default GPTPlayground;\nvar _c;\n$RefreshReg$(_c, \"GPTPlayground\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GPTPlayground","_s","inputText","setInputText","selectedModel","setSelectedModel","handleRunModel","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/avipeltz/Developer/100days/foundationPlayground/foundationplayground/src/GPTPlayground.js"],"sourcesContent":["// GPTPlayground.js\nimport React, { useState } from 'react';\n\nconst GPTPlayground = () => {\n  const [inputText, setInputText] = useState('');\n  const [selectedModel, setSelectedModel] = useState('gpt-3'); // Default model\n\n  const handleRunModel = () => {\n    // Add your logic here to run the selected GPT model with the inputText\n    // and display the output.\n    // You can use OpenAI API or any other method to interact with GPT models.\n\n    // For now, let's just log the input text and selected model to the console.\n    console.log(`Running ${selectedModel} model with input: ${inputText}`);\n  };\n\n  return (\n    <div className=\"container mx-auto mt-8\">\n      <div className=\"max-w-2xl mx-auto bg-white p-8 rounded shadow\">\n        <h1 className=\"text-2xl font-bold mb-4\">GPT Playground</h1>\n\n        <label className=\"flex\">Input Text:</label>\n        <br />\n        <textarea\n          className=\"w-full p-2 border border-gray-300 rounded mb-4\"\n          rows=\"4\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        ></textarea>\n        <br />\n        <label className=\"block mb-2\">Select Model:</label>\n        <select\n          className=\"w-full p-2 border border-gray-300 rounded mb-4\"\n          value={selectedModel}\n          onChange={(e) => setSelectedModel(e.target.value)}\n        >\n          <option value=\"gpt-3\">GPT-3</option>\n          <option value=\"gpt-3-5\">GPT-3.5</option>\n          <option value=\"llama\">llama</option>\n          {/* Add more models as needed */}\n        </select>\n\n        <button\n          className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-700\"\n          onClick={handleRunModel}\n        >\n          Run Model\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GPTPlayground;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
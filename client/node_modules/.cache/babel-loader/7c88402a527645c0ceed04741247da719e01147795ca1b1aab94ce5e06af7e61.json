{"ast":null,"code":"var _jsxFileName = \"/Users/avipeltz/Developer/100days/foundationPlayground/foundationplayground/client/src/components/Pages/BioPredictor.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useRef } from 'react';\nimport MyNavBar from \"../MyNavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst sequenceExamples = [{\n  id: 0,\n  sequence: 'MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH'\n}, {\n  id: 1,\n  sequence: 'MTEYKLVVVGAGGVGKSALTIQLIQNHFVDEYDPTIEDSYRKQVVIDGETCLLDILDTAGQEEYSAMRDQYMRTGEGFLCVFAINNTKSFEDIHQYREQIKRVKDSDDVPMVLVGNKCDLAARTVESRQAQDLARSYGIPYIETSAKTRQGVEDAFYTLVREIRQHKLRKLNPPDESGPGCMSCKCVLS'\n}, {\n  id: 2,\n  sequence: 'MQIFVKTLTGKTITLEVEPSDTIENVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG'\n}];\nexport default function BioPredictor() {\n  _s();\n  const [sequenceInput, setSequenceInput] = useState('');\n  const [predictionStatus, setPredictionStatus] = useState('empty'); // 'empty', 'typing', 'submitting', 'modelrunning', 'success'\n  let sequenceInputRef = useRef(sequenceInput);\n  function handleClick() {\n    setPredictionStatus('submitting');\n    sequenceInputRef.current = sequenceInput;\n    setTimeout(() => {\n      setPredictionStatus('modelrunning');\n      alert('Model is running');\n      setTimeout(() => {\n        setPredictionStatus('success');\n        alert('Prediction Successful');\n      }, 5000);\n    }, 2000);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MyNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center p-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl font-semibold\",\n          children: \"BioGlyph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2 border rounded bg-slate-100 m-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-semibold\",\n            children: \"Monomer Structure prediction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium text-lg p-2 text-gray-600\",\n            children: [\"Enter the sequence of the protein monomer to predict its structure using \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"AlphaFold\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 94\n            }, this), \" an ML Model developed by DeepMind.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-lg font-semibold\",\n            children: \"Chain Sequence:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"border rounded-md p-2  h-32 w-full\",\n            onChange: e => setSequenceInput(e.target.value),\n            placeholder: \"MALKSLVLLSLLVLVLLLVRVQPSLGKETAAAKFERQHMDSSTSAASSSNYCNQMMKSRNLTKDRCKPVNTFVHESLADVQAVCSQKNVACKNGQTNCYQSYSTMSITDCRETGSSKYPNCAYKTTQANKHIIVACEGNPYVPVHFDASV\",\n            value: sequenceInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white p-2 font-semibold rounded-md m-2\",\n            onClick: handleClick,\n            children: \"Predict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-2 border rounded bg-slate-100 m-4\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \" text-2xl font-semibold\",\n            children: \"Predicted output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(BioPredictor, \"QgJYrxBLXAtJigg+cerGVmPOBZU=\");\n_c = BioPredictor;\nexport function SequenceForm() {\n  _s2();\n  const [sequenceInput, setSequenceInput] = useState('');\n  const [status, setStatus] = useState('typing'); // 'typing', 'submitting', 'modelrunning', 'success'  \n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s2(SequenceForm, \"zjJi5sAexC8niG/h3vomM+426Tg=\");\n_c2 = SequenceForm;\nvar _c, _c2;\n$RefreshReg$(_c, \"BioPredictor\");\n$RefreshReg$(_c2, \"SequenceForm\");","map":{"version":3,"names":["useState","useRef","MyNavBar","jsxDEV","_jsxDEV","Fragment","_Fragment","sequenceExamples","id","sequence","BioPredictor","_s","sequenceInput","setSequenceInput","predictionStatus","setPredictionStatus","sequenceInputRef","handleClick","current","setTimeout","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","e","target","value","placeholder","onClick","_c","SequenceForm","_s2","status","setStatus","_c2","$RefreshReg$"],"sources":["/Users/avipeltz/Developer/100days/foundationPlayground/foundationplayground/client/src/components/Pages/BioPredictor.js"],"sourcesContent":["import { useState, useRef } from 'react';\nimport MyNavBar from \"../MyNavBar\";\n\n\nconst sequenceExamples = [\n    {\n    id: 0,\n    sequence: 'MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH',\n    },\n    {\n    id: 1,\n    sequence: 'MTEYKLVVVGAGGVGKSALTIQLIQNHFVDEYDPTIEDSYRKQVVIDGETCLLDILDTAGQEEYSAMRDQYMRTGEGFLCVFAINNTKSFEDIHQYREQIKRVKDSDDVPMVLVGNKCDLAARTVESRQAQDLARSYGIPYIETSAKTRQGVEDAFYTLVREIRQHKLRKLNPPDESGPGCMSCKCVLS',\n    },\n    {\n    id: 2,\n    sequence: 'MQIFVKTLTGKTITLEVEPSDTIENVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG',\n    },\n];\n\nexport default function BioPredictor(){\n    const [sequenceInput, setSequenceInput] = useState('');\n    const [predictionStatus, setPredictionStatus] = useState('empty'); // 'empty', 'typing', 'submitting', 'modelrunning', 'success'\n    let sequenceInputRef = useRef(sequenceInput);\n\n    function handleClick(){\n        setPredictionStatus('submitting');\n        sequenceInputRef.current = sequenceInput;\n        setTimeout(() => {\n            setPredictionStatus('modelrunning');\n            alert('Model is running');\n            setTimeout(() => {\n                setPredictionStatus('success');\n                alert('Prediction Successful');\n            }, 5000);\n        }, 2000);\n    }\n    return(\n        <>\n        <MyNavBar />\n        <div>\n        <div className=\"flex justify-center items-center p-4\">\n            <h1 className=\"text-4xl font-semibold\">BioGlyph</h1>\n        </div>\n        <div className='grid grid-cols-2'>\n            <div className='p-2 border rounded bg-slate-100 m-4'>\n                <h2 className='text-2xl font-semibold'>Monomer Structure prediction</h2>\n                <p className='font-medium text-lg p-2 text-gray-600'>\n                    Enter the sequence of the protein monomer to predict its structure using <b>AlphaFold</b> an ML Model developed by DeepMind.\n                </p>\n                <h2 className='text-lg font-semibold'>Chain Sequence:</h2>\n\n                <textarea\n                className='border rounded-md p-2  h-32 w-full'\n                onChange={(e) => setSequenceInput(e.target.value)}\n                placeholder='MALKSLVLLSLLVLVLLLVRVQPSLGKETAAAKFERQHMDSSTSAASSSNYCNQMMKSRNLTKDRCKPVNTFVHESLADVQAVCSQKNVACKNGQTNCYQSYSTMSITDCRETGSSKYPNCAYKTTQANKHIIVACEGNPYVPVHFDASV'\n                value={sequenceInput}/>\n                <button \n                className='bg-blue-500 hover:bg-blue-600 text-white p-2 font-semibold rounded-md m-2'\n                onClick={handleClick}\n                >Predict\n                </button>\n\n            </div>\n            <div className='p-2 border rounded bg-slate-100 m-4'>\n                <h2 className=' text-2xl font-semibold'>Predicted output</h2>\n            </div>\n        </div>\n        </div>\n        </>\n    );\n\n}\n\nexport function SequenceForm(){\n    const [sequenceInput, setSequenceInput] = useState('');\n    const [status, setStatus] = useState('typing'); // 'typing', 'submitting', 'modelrunning', 'success'  \n    return(\n        <div>\n\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}